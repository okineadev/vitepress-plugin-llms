name: üîÑÔ∏è CI

on:
  # https://blog.esciencecenter.nl/reduce-reuse-recycle-save-the-planet-one-github-action-at-a-time-4ab602255c3f
  push:
    paths:
      - .github/workflows/**
      - src/**
      - tests/**
      - package.json
      - bun.lock
      - bunfig.toml
      - bunup.config.ts
      - tsconfig*.json
      - "!**/*.md"

  pull_request:
    paths:
      - .github/workflows/**
      - src/**
      - tests/**
      - package.json
      - bun.lock
      - bunfig.toml
      - bunup.config.ts
      - tsconfig*.json
      - "!**/*.md"

  workflow_dispatch:
    inputs:
      run-on-windows:
        description: Run tests on Windows
        type: boolean
        default: false
        required: false

concurrency:
  group: tests-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    permissions: {}
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    uses: ./.github/workflows/tests.yml
    with:
      run-on-windows: ${{ inputs.run-on-windows || contains(github.event.head_commit.message, '[test windows]') }}

  pkg-pr-new:
    name: ‚ö° pkg.pr.new
    needs: test
    runs-on: ubuntu-latest
    if: github.event.repository.full_name == 'okineadev/vitepress-plugin-llms'

    permissions:
      contents: read
      issues: write

    steps:
      - name: üì• Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
          sparse-checkout-cone-mode: false
          # Download only the necessary files
          sparse-checkout: |
            src/
            package.json
            bun.lock
            bunfig.toml
            bunup.config.ts
            README.md
            LICENSE
            tsconfig*.json

      - name: üîß Setup Bun
        uses: oven-sh/setup-bun@735343b667d3e6f658f44d0eca948eb6282f2b76 # v2.0.2

      - name: üì¶ Install dependencies
        run: bun install --frozen-lockfile

      - name: ‚öíÔ∏è Build package
        run: bun run build

      - name: ‚ö° Publish prerelease
        run: bunx pkg-pr-new publish --json output.json --comment=off

      - name: üí¨ Post pkg.pr.new comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const output = JSON.parse(fs.readFileSync('output.json', 'utf8'));

            const pkg = output.packages?.[0];
            const installCmd = pkg ? `npm i ${pkg.name}@${pkg.version} -D` : 'npm i <package-name>@<version> -D';

            const sha = context.eventName === 'pull_request'
              ? context.payload.pull_request.head.sha
              : context.payload.after;

            const commitUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/commit/${sha}`;

            const body = `### üß™ Test this commit

            \`\`\`bash
            ${installCmd}
            \`\`\`

            [View commit](${commitUrl})`;

            const botCommentIdentifier = '### üß™ Test this commit';

            async function findExistingComment(issueNumber) {
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
              });
              return comments.data.find(c => c.body.includes(botCommentIdentifier));
            }

            async function upsertComment(issueNumber) {
              const existing = await findExistingComment(issueNumber);
              if (existing) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: existing.id,
                  body: body,
                });
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  body: body,
                });
              }
            }

            if (context.eventName === 'pull_request' && context.issue.number) {
              await upsertComment(context.issue.number);
            }
