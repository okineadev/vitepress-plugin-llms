name: 🚀 Release + Publish

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g. 1.2.3)'
        required: false

jobs:
  check-previous-workflow:
    name: 🔍 Check if tests have already been passed
    runs-on: ubuntu-latest
    steps:
      - id: check
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          script: |
            const ci_workflow_path = '.github/workflows/ci.yml'
            const current_commit_sha = context.sha;
            console.log(`Checking workflows for commit: ${current_commit_sha}`);

            const workflows = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              status: 'success'
            });

            // Check if CI workflow has already run successfully on this commit
            const ciRun = workflows.data.workflow_runs.find(run =>
              run.path === ci_workflow_path &&
              run.head_sha === current_commit_sha &&
              run.conclusion === 'success'
            );

            if (ciRun) {
              console.log(`CI workflow has already run successfully on commit ${current_commit_sha}`);
              return core.setOutput('should-run-tests', 'false');
            } else {
              console.log(`No successful CI run found for commit ${current_commit_sha}, will run tests`);
              return core.setOutput('should-run-tests', 'true');
            }

  test:
    needs: check-previous-workflow
    if: needs.check-previous-workflow.outputs.should-run-tests == 'true'
    permissions: {}
    uses: ./.github/workflows/tests.yml

  release:
    name: 🚀 Release
    needs: [check-previous-workflow, test]
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped')
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: write
      attestations: write

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          # Required for fetching tags and generating release notes
          fetch-depth: 0

      - name: 🔧 Setup Bun
        uses: oven-sh/setup-bun@4bc047ad259df6fc24a6c9b0f9a0cb08cf17fbe5 # v2
        with:
          bun-version: latest

      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile

      - name: 🔧 Configure Git
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          git config --global push.followTags true

      - name: 🚀 Prepare release
        run: bun run preversion

      - name: 🛠️ Build package
        run: bun run build

      - name: 📜 Generate changelog and release notes
        env:
          VERSION: ${{ github.event.inputs.version }}
        run: |
          bunx changelogen --release --push -r $VERSION
          bunx changelogen github release --token ${{ secrets.GITHUB_TOKEN }} -r $VERSION

      - name: 📦 Publish to NPM Registry
        run: |
          bunx npm set "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}"
          bunx npm publish --provenance --access public